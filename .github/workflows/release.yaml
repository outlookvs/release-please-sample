name: Release Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write
  packages: write
  issues: write

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs['packages/a--release_created'] }}
      tag_name: ${{ steps.release.outputs['packages/a--tag_name'] }}
      upload_url: ${{ steps.release.outputs['packages/a--upload_url'] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release with release-please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          command: manifest-file
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show release outputs
        if: steps.release.outputs.releases_created
        run: |
          echo "Releases created: ${{ steps.release.outputs.releases_created }}"
          echo "Package A release created: ${{ steps.release.outputs['packages/a--release_created'] }}"
          echo "Package A tag name: ${{ steps.release.outputs['packages/a--tag_name'] }}"

  build:
    name: Build and Test Package A
    needs: release
    if: needs.release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        working-directory: packages/a
        run: |
          poetry install --no-interaction

      - name: Run tests
        working-directory: packages/a
        run: |
          poetry run pytest

      - name: Build package
        working-directory: packages/a
        run: |
          poetry build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-a-${{ needs.release.outputs.tag_name }}
          path: packages/a/dist/

  docker:
    name: Build and Push Docker Image
    needs: [release, build]
    if: needs.release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: packages/a
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/package-a:${{ needs.release.outputs.tag_name }}
            ghcr.io/${{ github.repository }}/package-a:latest
          labels: |
            org.opencontainers.image.title=Package A
            org.opencontainers.image.description=Sample Package A for release-please demonstration
            org.opencontainers.image.version=${{ needs.release.outputs.tag_name }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}